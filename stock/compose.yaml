services:
  app:
    build:
      context: .
    ports:
      - 8000:8000
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
  publish:
    build:
      context: .
    command: [ "python", "manage.py", "publish" ]
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
  subscribe:
    build:
      context: .
    command: [ "python", "manage.py", "subscribe", "src.core.orchestrator.orchestrator", "/exchange/saga/orchestrator", "orchestrator" ]
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
  db:
    image: postgis/postgis:16-3.4
    restart: always
    volumes:
      - db-data:/var/lib/postgresql/data
    env_file:
      - .env
    expose:
      - 5432
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-user} -d ${POSTGRES_DB:-db}"  ]
      interval: 5s
      timeout: 5s
      retries: 5
  rabbitmq:
    image: rabbitmq:3.9.29-management
    volumes:
      - ../rabbitmq:/etc/rabbitmq/
    healthcheck:
      test: [ "CMD-SHELL","rabbitmq-diagnostics -q ping" ]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - "15672:15672"
      - "5672:5672"
      - "61613:61613"
volumes:
  db-data:

