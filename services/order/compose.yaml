services:
  order:
    build:
      context: .
    ports:
      - 8000:8000
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      order-db:
        condition: service_healthy
  order-publish:
    build:
      context: .
    command: [ "python", "manage.py", "publish" ]
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      order-db:
        condition: service_healthy
  order-orchestrator:
    build:
      context: .
    command: [ "python", "manage.py", "subscribe", "src.core.orchestrator.orchestrator", "/exchange/saga/orchestrator", "orchestrator" ]
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      order-db:
        condition: service_healthy
  order-subscribe:
    build:
      context: .
    command: [ "python", "manage.py", "subscribe", "src.core.consumer.receiver", "/exchange/saga/order", "order" ]
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      order-db:
        condition: service_healthy
  order-db:
    image: postgis/postgis:16-3.4
    restart: always
    volumes:
      - order-db-data:/var/lib/postgresql/data
    env_file:
      - .env
    expose:
      - 5432
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-user} -d ${POSTGRES_DB:-db}"  ]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  order-db-data:
